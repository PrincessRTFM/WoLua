namespace PrincessRTFM.WoLua.Lua.Api.Script;

using System.Linq;

using MoonSharp.Interpreter;
using MoonSharp.Interpreter.Serialization.Json;

public class DebugApi: ApiBase {
	#region Non-API functionality

	[MoonSharpHidden]
	internal DebugApi(ScriptContainer source) : base(source, "DEBUG") { }

	#endregion

	#region API read/write properties
	// Important note: these MUST be properties! Fields do not work, scripts cannot set them even if they aren't `readonly` fields.
	// If nothing special needs to be done for read/write access, then an autogenerated property MUST be used.

	public bool Enabled { get; set; } = false;

	#endregion

	#region API methods

	public void PrintString(string message) {
		if (this.Disposed)
			return;

		this.Log(message);
	}

	[MoonSharpUserDataMetamethod("__call")]
	public void Print(params DynValue[] values) {
		if (this.Disposed)
			return;

		this.PrintString(string.Join(" ", values.Select(dv => ToUsefulString(dv))));
	}

	[MoonSharpHidden]
	// This isn't exposed to the scripts themselves because it's basically a nearly-nop filler, but it's still part of the debug API so it goes in here
	public string Input(string prompt) {
		if (!this.Disposed)
			this.Log(prompt, "INPUT");

		return string.Empty;
	}

	public void DumpStorage() {
		if (this.Disposed)
			return;

		this.Log(this.Owner.ScriptApi.Storage.TableToJson(), "STORAGE");
	}

	public void Dump(params DynValue[] values) {
		if (this.Disposed)
			return;

		this.Log($"BEGIN VALUE DUMP: {values.Length}");
		int size = values.Length.ToString().Length;
		for (int i = 0; i < values.Length; ++i) {
			DynValue v = values[i];
			this.Log($"{(i + 1).ToString().PadLeft(size)}: {ToUsefulString(v)}");
		}
		this.Log("END VALUE DUMP");
	}

	#endregion
}
